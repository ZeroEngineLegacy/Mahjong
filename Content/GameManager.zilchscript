class PlayerEvent : ZilchEvent
{
  var Player : Player;
  
  constructor(player : Player) : base()
  {
    this.Player = player;
  }
}

//enum PhaseType{Startup, PlayerTurn}

class GameManager : ZilchComponent
{
  [Dependency] var GameData : GameSharedData;
  [Dependency] var WallManager : GameWallManager;
  
  [Static] var TotalTiles : Integer = 17 * 2 * 4;
  
  [Property] var TurnTime : Real = 15;
  [Property] var TimerTextCogPath : CogPath = CogPath(":/TimeText");
  [Property] var CurrentPlayerTextCogPath : CogPath = CogPath(":/CurrentPlayerText");
  [Property] var CurrentPlayer : WindType = WindType.None;
  
  sends BeginPlayerTurn : ZilchEvent;
  sends ForceEndPlayerTurn : ZilchEvent;
  sends PlayerEndedTurn : ZilchEvent;
  sends RoundBegin : ZilchEvent;
  sends DiscardPlayerTile : PlayerEvent;
  sends BeginHoldPeriod : ZilchEvent;
  sends EndHoldPeriod : ZilchEvent;
  sends BeginPlayerTurnPeriod : ZilchEvent;
  sends EndPlayerTurnPeriod : ZilchEvent;
  sends CallHold : PlayerEvent;
  sends CallChi : PlayerEvent;
  sends CallPon : PlayerEvent;
  
  var TurnAction : ActionSet = null;
  var TurnTimer : Real = 0;
  
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    Zero.Connect(this.Space, Events.EndHoldPeriod, this.OnEndHoldPeriod);
    Zero.Connect(this.Space, Events.EndPlayerTurnPeriod, this.OnEndPlayerTurnPeriod);
    Zero.Connect(init, Events.AllObjectsInitialized, this.OnAllObjectsInitialized);
  }

  function OnAllObjectsInitialized(event : CogInitializerEvent)
  {
    // Build the wall and distribute player hands
    Zero.Connect(this.Owner, Events.FinishedBuildingWall, this.OnFinishedBuildingWall);
    this.Owner.InitialGameSetup.CreateWall();
  }
  
  function OnLogicUpdate(event : UpdateEvent)
  {
    // Constantly display the current player and timer (if the game is running)
    //this.TurnTimer -= event.Dt;
    if(this.CurrentPlayer == WindType.None)
    {
      var timeText = this.TimerTextCogPath.Cog.SpriteText;
      var playerText = this.CurrentPlayerTextCogPath.Cog.SpriteText;
      timeText.Visible = false;
      playerText.Visible = false;
    }
    else
    {
      var timeText = this.TimerTextCogPath.Cog.SpriteText;
      var playerText = this.CurrentPlayerTextCogPath.Cog.SpriteText;
      timeText.Visible = true;
      playerText.Visible = true;
      timeText.Text = String.FormatC("Time: %.1f", this.TurnTimer);
      playerText.Text = "Player: `this.CurrentPlayer`";
    }
  }

  function OnFinishedBuildingWall(event : ZilchEvent)
  {
    // Start with east
    this.CurrentPlayer = WindType.East;
    
    // Notify everyone that the round is beginning (starts ai)
    this.Space.DispatchEvent(Events.RoundBegin, ZilchEvent());
    // Start player1's turn
    this.BeginPlayerTurnPeriod();
  }
  
  function GetCurrentPlayerIndex() : Integer
  {
    return this.CurrentPlayer as Integer;
  }
  
  function GetCurrentPlayerCog() : Cog
  {
    return this.GameData.PlayerCogs[this.GetCurrentPlayerIndex()];
  }
  
  function BeginPlayerTurnPeriod()
  {
    this.Space.DispatchEvent(Events.BeginPlayerTurnPeriod, ZilchEvent());
  }
  
  function OnEndPlayerTurnPeriod(event : ZilchEvent)
  {
    this.Space.DispatchEvent(Events.BeginHoldPeriod, ZilchEvent());
  }
  
  function OnEndHoldPeriod(event : ZilchEvent)
  {
    this.StartNextPlayerTurn();
  }
  
  function StartNextPlayerTurn()
  {
    // Update the current player
    var playerIndex = this.CurrentPlayer as Integer;
    playerIndex = (playerIndex + 1) % 4;
    this.CurrentPlayer = playerIndex as WindType;
    // Start the next player's turn
    this.BeginPlayerTurnPeriod();
  }
}

