class TileSelectionEvent : PlayerEvent
{
  var TileIndex : Integer = 0;
}

class TileSwapEvent : PlayerEvent
{
  var TileIndexA : Integer = 0;
  var TileIndexB : Integer = 0;
}


class Player : ZilchComponent
{
  [Dependency] var Camera : Camera;
  [Property] var HandPath : CogPath = CogPath();
  [Property] var DiscardButtonPath : CogPath = CogPath("./DiscardButton");
  [Property] var HoldButtonPath : CogPath = CogPath("./HoldButton");
  [Property] var ChiButtonPath : CogPath = CogPath("./ChiButton");
  [Property] var PonButtonPath : CogPath = CogPath("./PonButton");
  
  var Hand : PlayerHandManager = null;
  var DiscardButtonCog : Cog = null;
  var HoldButtonCog : Cog = null;
  var ChiButtonCog : Cog = null;
  var PonButtonCog : Cog = null;
  
  var SelectedTile : Cog = null;
  sends PlayerFinishedTurn : ZilchEvent;
  sends PlayerSelectTile : TileSelectionEvent;
  sends PlayerSwapTiles : TileSwapEvent;
  
  var IsMyTurn : Boolean = false;
  
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(init, Events.AllObjectsInitialized, this.OnAllObjectsInitialized);
    Zero.Connect(this.Owner, Events.BeginPlayerTurn, this.OnBeginPlayerTurn);
    Zero.Connect(this.Owner, Events.ForceEndPlayerTurn, this.OnForceEndPlayerTurn);
    Zero.Connect(this.Space, Events.BeginHoldPeriod, this.OnBeginHoldPeriod);
    Zero.Connect(this.Space, Events.EndHoldPeriod, this.OnEndHoldPeriod);
    Zero.Connect(this.Owner, Events.PlayerSelectTile, this.OnPlayerSelectTile);
    Zero.Connect(this.Owner, Events.PlayerSwapTiles, this.OnPlayerSwapTiles);
  }

  function OnPlayerSwapTiles(event : TileSwapEvent)
  {
    var cogA = this.Hand.TileCogFromIndex(event.TileIndexA);
    var cogB = this.Hand.TileCogFromIndex(event.TileIndexB);
    this.AnimateTileSwap(cogA, cogB);
  }
  
  function SelectTile(tileCog : Cog)
  {
    var toSend = TileSelectionEvent(this);
    toSend.TileIndex = this.Hand.IndexFromCog(tileCog);
    this.Space.DispatchEvent(Events.PlayerSelectTile, toSend);
  }
  
  function SwapTiles(indexA : Integer, indexB : Integer)
  {
    var toSend = TileSwapEvent(this);
    toSend.TileIndexA = indexA;
    toSend.TileIndexB = indexB;
    this.Space.DispatchEvent(Events.PlayerSwapTiles, toSend);
  }
  
  function SwapTiles(cogA : Cog, cogB : Cog)
  {
    this.SwapTiles(this.Hand.IndexFromCog(cogA), this.Hand.IndexFromCog(cogB));
  }

  function OnPlayerSelectTile(event : TileSelectionEvent)
  {
    var tileCog = this.Hand.TileCogFromIndex(event.TileIndex);
    // If we selected the tile that was already selected then de-select it
    if(this.SelectedTile == tileCog)
    {
      this.AnimateTileSelection(null);
      return;
    }
    
    // If we had a selected tile then swap it with the new one
    if(this.SelectedTile != null)
    {
      this.AnimateTileSwap(this.SelectedTile, tileCog);
      this.SelectedTile = null;
      return;
    }
    
    // Otherwise select the new tile
    this.AnimateTileSelection(tileCog);
  }
  
  function AnimateTileSwap(cogA : Cog, cogB : Cog)
  {
    this.Hand.SwapTiles(cogA, cogB, 10);
  }
  
  function AnimateTileSelection(newSelectedCog : Cog)
  {
    var group = Actions.Group(this.Owner.Actions);
    // If we had a selected tile then animate back down to the regular position
    if(this.SelectedTile != null)
    {
      var downPos = this.SelectedTile.Transform.WorldTranslation;
      downPos.Y = this.Hand.TilePosY;
      Actions.Property(group, @this.SelectedTile.Transform.WorldTranslation, downPos, 0.1, Ease.Linear);
    }
    
    // if we're selecting a new tile then animate it up a little bit
    if(newSelectedCog != null)
    {
      var upPos = newSelectedCog.Transform.WorldTranslation;
      upPos.Y = this.Hand.SelectedTilePosY;
      Actions.Property(group, @newSelectedCog.Transform.WorldTranslation, upPos, 0.1, Ease.Linear);
    }
    this.SelectedTile = newSelectedCog;
  }
  
  function OnAllObjectsInitialized(event : CogInitializerEvent)
  {
    this.Hand = this.HandPath.Cog.PlayerHandManager;
    this.DiscardButtonCog = this.DiscardButtonPath.Cog;
    this.HoldButtonCog = this.HoldButtonPath.Cog;
    this.ChiButtonCog = this.ChiButtonPath.Cog;
    this.PonButtonCog = this.PonButtonPath.Cog;
  }
  function OnBeginHoldPeriod(event : ZilchEvent)
  {
    this.ActivateButton(this.HoldButtonCog, Events.LeftClick, this.OnHoldClicked);
    this.ActivateButton(this.ChiButtonCog, Events.LeftClick, this.OnChiClicked);
    this.ActivateButton(this.PonButtonCog, Events.LeftClick, this.OnPonClicked);
  }
  
  function OnEndHoldPeriod(event : ZilchEvent)
  {
    this.DeactivateButton(this.HoldButtonCog, Events.LeftClick);
    this.DeactivateButton(this.ChiButtonCog, Events.LeftClick);
    this.DeactivateButton(this.PonButtonCog, Events.LeftClick);
  }
  
  function OnHoldClicked(event : Event)
  {
    this.Space.DispatchEvent(Events.CallHold, PlayerEvent(this));
  }
  
  function OnChiClicked(event : Event)
  {
    
  }
  
  function OnPonClicked(event : Event)
  {
    
  }

  function OnBeginPlayerTurn(event : ZilchEvent)
  {
    this.IsMyTurn = true;
    
    // Since the turn just started start receiving button inputs
    this.ActivateButton(this.DiscardButtonCog, Events.LeftClick, this.OnDiscardClicked);
  }
  
  function OnForceEndPlayerTurn(event : Event)
  {
    // We ran out of time so force a tile discard
    this.Hand.DiscardLastTile(DiscardType.Regular);
  }
  
  function OnDiscardClicked(event : Event)
  {
    this.DiscardTileAndEndTurn(DiscardType.Regular);
  }
  
  function DiscardTileAndEndTurn(discardType : DiscardType)
  {
    this.EndTurn();
    // Manually discard the last tile then notify the game that we ended our turn
    this.Space.DispatchEvent(Events.DiscardPlayerTile, PlayerEvent(this));
    //this.LevelSettings.GameManager.PlayerDiscard();
  }
  
  function EndTurn()
  {
    // Dispatch that we finished our turn
    //this.Owner.DispatchEvent(Events.PlayerFinishedTurn, ZilchEvent());
    this.TurnEndCleanup();
  }
  
  // Shared logic to cleanup connections when a turn ends (regardless of manually or forced)
  function TurnEndCleanup()
  {
    this.IsMyTurn = false;
    this.DeactivateButton(this.DiscardButtonCog, Events.LeftClick);
  }
  
  function ActivateButton(buttonCog : Cog, eventName : String, callback : delegate(event : Event))
  {
    if(buttonCog != null)
    {
      buttonCog.UiButton.Activate();
      Zero.Connect(buttonCog, eventName, callback);
    }
  }
  
  function DeactivateButton(buttonCog : Cog, eventName : String)
  {
    if(buttonCog != null)
    {
      buttonCog.UiButton.Deactivate();
      Zero.Disconnect(buttonCog, eventName, this);
    }
  }
}
